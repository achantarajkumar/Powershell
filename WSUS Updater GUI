<# This form was created using POSHGUI.com  a free online gui designer for PowerShell
.NAME
    WSUS Updater Version 1.0 By Rajkumar Achanta

#>

Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

$Form                            = New-Object system.Windows.Forms.Form
$Form.ClientSize                 = '504,484'
$Form.text                       = "WSUS Updater"
$Form.TopMost                    = $true

$ListView1                       = New-Object system.Windows.Forms.ListBox
$ListView1.text                  = "listView"
$ListView1.width                 = 220
$ListView1.height                = 276
$ListView1.location              = New-Object System.Drawing.Point(10,20)

$Button1                         = New-Object system.Windows.Forms.Button
$Button1.text                    = "Browse..."
$Button1.width                   = 120
$Button1.height                  = 40
$Button1.location                = New-Object System.Drawing.Point(272,30)
$Button1.Font                    = 'Microsoft Sans Serif,10'

$Button2                         = New-Object system.Windows.Forms.Button
$Button2.text                    = "Install Updates"
$Button2.width                   = 120
$Button2.height                  = 40
$Button2.location                = New-Object System.Drawing.Point(272,100)
$Button2.Font                    = 'Microsoft Sans Serif,10'

$Button3                         = New-Object system.Windows.Forms.Button
$Button3.text                    = "WSUS client commands"
$Button3.width                   = 120
$Button3.height                  = 40
$Button3.location                = New-Object System.Drawing.Point(272,140)
$Button3.Font                    = 'Microsoft Sans Serif,10'

$Button4                         = New-Object system.Windows.Forms.Button
$Button4.text                    = "Credential"
$Button4.width                   = 120
$Button4.height                  = 40
$Button4.location                = New-Object System.Drawing.Point(272,65)
$Button4.Font                    = 'Microsoft Sans Serif,10'

$Label1                          = New-Object system.Windows.Forms.Label
$Label1.text                     = "Count of Servers"
$Label1.AutoSize                 = $true
$Label1.width                    = 100
$Label1.height                   = 10
$Label1.location                 = New-Object System.Drawing.Point(17,317)
$Label1.Font                     = 'Microsoft Sans Serif,10'

$Label2                          = New-Object system.Windows.Forms.Label
$Label2.text                     = "0"
$Label2.AutoSize                 = $true
$Label2.width                    = 20
$Label2.height                   = 10
$Label2.location                 = New-Object System.Drawing.Point(130,317)
$Label2.Font                     = 'Microsoft Sans Serif,10'

$Form.controls.AddRange(@($ListView1,$Button1,$Button2,$Button3,$Button4,$Label1,$Label2))

$Button1.Add_Click({ OpenFileDialogFun })
$Button2.Add_Click({ InstallUpdatesFun })
$Button3.Add_Click({ WSUSUpdatesFun })
$Button4.Add_Click({ CredUpdatesFun })

function CredUpdatesFun{
$global:c = Get-Credential
}

function OpenFileDialogFun { 
#Write your logic code here
$FileBrowser = New-Object System.Windows.Forms.OpenFileDialog -Property @{ 
    InitialDirectory = [Environment]::GetFolderPath('Desktop') 
    Filter = 'Documents (*.txt)|*.txt'
}

[void] $FileBrowser.ShowDialog()

$FilePath = $FileBrowser.FileName

$computerNames = Get-Content -Path $FilePath

$Listview1.BeginUpdate()

      foreach($computer in $computerNames)

        {

         $Listview1.Items.add($computer)

        }

 $Listview1.EndUpdate()

 $Label2.Text = $Listview1.Items.Count
}

function InstallUpdatesFun{



for($i=0;$i -lt $Label2.Text;$i++)
{
#[System.Windows.MessageBox]::Show($listview1.items[$i])
$rv = Invoke-Command -Credential $c -ComputerName $ListView1.Items[$i] -ScriptBlock ${function:Foo1}
} 

 }

 function Foo1 {
    
$Criteria = "IsInstalled=0 and Type='Software'";`
#Search for relevant updates.
$Searcher = New-Object -ComObject Microsoft.Update.Searcher;`
$SearchResult = $Searcher.Search($Criteria).Updates;`

$Session = New-Object -ComObject Microsoft.Update.Session;`
$Downloader = $Session.CreateUpdateDownloader();`
$Downloader.Updates = $SearchResult;`
$Downloader.Download();`

$Installer = New-Object -ComObject Microsoft.Update.Installer;`
$Installer.Updates = $SearchResult;`
#Result -> 2 = Succeeded, 3 = Succeeded with Errors, 4 = Failed, 5 = Aborted
$Result = $Installer.Install();`
If ($Result.rebootRequired) { Restart-Computer }
}

function WSUSUpdatesFun {
    for($i=0;$i -lt $Label2.Text;$i++)
    {
    $rv1 = Invoke-Command -Credential $c -ComputerName $ListView1.Items[$i] -ScriptBlock {wuauclt /detectnow /register /reportnow}
    }
} 

[void]$Form.ShowDialog()
